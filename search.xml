<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>高杰的小窝</title>
    <url>/2024/07/14/%E9%AB%98%E6%9D%B0%E7%9A%84%E5%B0%8F%E7%AA%9D/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>我的</category>
      </categories>
      <tags>
        <tag>我的</tag>
      </tags>
  </entry>
  <entry>
    <title>什么是Nginx？</title>
    <url>/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/</url>
    <content><![CDATA[<h2 id="1-Nginx概述"><a href="#1-Nginx概述" class="headerlink" title="1.Nginx概述"></a>1.Nginx概述</h2><h3 id="1-1-Nginx是什么？"><a href="#1-1-Nginx是什么？" class="headerlink" title="1.1.Nginx是什么？"></a>1.1.Nginx是什么？</h3><p>Nginx是一个高性能的http和反向代理服务器，其特点是占用内存小，并发能力强。Nginx专为性能优化而开发，性能是其最重要的考量，能经受高负载的考验，有报告表明能支持高达50000个并发连接数。<br><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-1.png" alt="image-1.png"><br>Nginx 是开源、高性能、高可靠的 Web 和反向代理服务器，而且支持热部署，几乎可以做到 7 * 24 小时不间断运行，即使运行几个月也不需要重新启动，还能在不间断服务的情况下对软件版本进行热更新。性能是 Nginx 最重要的考量，其占用内存少、并发能力强、能支持高达 5w 个并发连接数，最重要的是，Nginx 是免费的并可以商业化，配置使用也比较简单。<br>Nginx 的最重要的几个使用场景：</p>
<ul>
<li>静态资源服务，通过本地文件系统提供服务；</li>
<li>反向代理服务，延伸出包括缓存、负载均衡等；</li>
<li>API 服务，OpenResty</li>
</ul>
<h3 id="1-2-Nginx的重点"><a href="#1-2-Nginx的重点" class="headerlink" title="1.2.Nginx的重点"></a>1.2.Nginx的重点</h3><ul>
<li>反向代理</li>
<li>负载均衡</li>
<li>nginx特点</li>
</ul>
<p>学习Nginx的重点就理解什么是反向代理  负载均衡还有他的一些特点。</p>
<h2 id="2-Nginx的相关功能"><a href="#2-Nginx的相关功能" class="headerlink" title="2.Nginx的相关功能"></a>2.Nginx的相关功能</h2><h3 id="2-1-反向代理"><a href="#2-1-反向代理" class="headerlink" title="2.1.反向代理"></a>2.1.反向代理</h3><p>这里说到反向代理，我们一定想知道什么是正向代理？  我们可以先来连接什么是正向代理。<br>理是在服务器和客户端之间假设的<strong>一层服务器</strong>，代理将接收客户端的请求并将它转发给服务器，然后将服务端的响应转发给客户端。<br>不管是正向代理还是反向代理，实现的都是上面的功能。如果你对OSI 七层模型与 TCP&#x2F;IP 四层模型不是很熟悉可以再回顾下。<br><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-2.png" alt="image.png"><br>正向代理一般是客户端架设的 ，比如在自己的机器上安装一个代理软件。而反向代理一般是服务器架设的 ，比如在自己的机器集群中部署一个反向代理服务器。<br>正向代理类似一个跳板机，<strong>代理访问外部资源，相当我们经常说的代理IP去爬虫。</strong><br>比如我们国内访问谷歌，直接访问访问不到，我们可以通过一个<strong>正向代理服务器，请求发到代理服</strong>，代理服务器能够访问谷歌，这样由代理去谷歌取到返回数据，再返回给我们，这样我们就能访问谷歌了。就是科学上网的意思，面向客户端的。</p>
<p><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-3.png" alt="image.png"><br><strong>正向代理的用途：</strong><br>（1）访问原来无法访问的资源，如google<br>（2）可以做缓存，加速访问资源<br>（3）对客户端访问授权，上网进行认证<br>（4）代理可以记录用户访问记录（上网行为管理），对外隐藏用户信息<br><strong>反向代理</strong><br>了解了正向代理，下面理解反向代理会相对比较简单了，就是代理服务器来接受Internet上的请求，然后发送给内部网路的服务器上，在将结果返回给客户，相当于一层服务器来对外开放。<br><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-4.png" alt="image.png"><br><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-5.png" alt="image.png"><br>反向代理是面向内部服务器的。<br>反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。<br>反向代理是为服务端服务的，反向代理可以帮助服务器接收来自客户端的请求，帮助服务器做请求转发，负载均衡等。<br>反向代理对服务端是透明的，对我们是非透明的，即我们并不知道自己访问的是代理服务器，而服务器知道反向代理在为他服务。<br><strong>反向代理的作用：</strong></p>
<ol>
<li>保证内网的安全，阻止web攻击，大型网站，通常将反向代理作为公网访问地址，Web服务器是内网</li>
<li>负载均衡，通过反向代理服务器来优化网站的负载</li>
</ol>
<h3 id="2-2-负载均衡"><a href="#2-2-负载均衡" class="headerlink" title="2.2.负载均衡"></a>2.2.负载均衡</h3><p>如果请求数过大，单个服务器解决不了，我们增加服务器的数量，然后将请求分发到各个服务器上，将原先请求集中到单个服务器的情况改为请求分发到多个服务器上，就是负载均衡。<br>Upstream 指定后端服务器地址列表，在 server 中拦截响应请求，并将请求转发到 Upstream 中配置的服务器列表。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="section">upstream</span> balanceServer &#123;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.1.22.33:12345</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.1.22.34:12345</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">10.1.22.35:12345</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123; </span><br><span class="line">    <span class="attribute">server_name</span>  fe.server.com;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="section">location</span> /api &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://balanceServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的配置只是指定了 nginx 需要转发的服务端列表，并没有指定分配策略。<br>默认情况下采用的是<strong>轮询策略</strong>，将所有客户端请求<strong>轮询</strong>分配给服务端。这种策略是可以正常工作的，但是如果其中某一台服务器压力太大，出现延迟，会影响所有分配在这台服务器下的用户。<br><strong>Nginx支持的负载均衡调度算法方式如下：</strong></p>
<ul>
<li><strong>weight轮询(默认，常用)<strong>：接收到的请求按照权重分配到不同的后端服务器，即使在使用过程中，某一台后端服务器宕机，Nginx会自动将该服务器剔除出队列，请求受理情况不会受到任何影响。这种方式下，可以给不同的后端服务器设置一个</strong>权重值(weight)<strong>，用于调整不同的服务器上请求的分配率；</strong>权重数据越大，被分配到请求的几率越大</strong>；该权重值，主要是针对实际工作环境中不同的后端服务器硬件配置进行调整的。</li>
<li><strong>ip_hash（常用）</strong>：每个请求按照发起客户端的ip的hash结果进行匹配，这样的算法下一个固定ip地址的客户端总会访问到同一个后端服务器，这也在一定程度上解决了集群部署环境下session共享的问题。</li>
<li><strong>fair</strong>：智能调整调度算法，动态的根据后端服务器的请求处理到响应的时间进行均衡分配，响应时间短处理效率高的服务器分配到请求的概率高，响应时间长处理效率低的服务器分配到的请求少；结合了前两者的优点的一种调度算法。但是需要注意的是Nginx默认不支持fair算法，如果要使用这种调度算法，请安装upstream_fair模块。</li>
<li><strong>url_hash</strong>：按照访问的url的hash结果分配请求，每个请求的url会指向后端固定的某个服务器，可以在Nginx作为静态服务器的情况下提高缓存效率。同样要注意Nginx默认不支持这种调度算法，要使用的话需要安装Nginx的hash软件包。</li>
</ul>
<h3 id="2-3、动静分离"><a href="#2-3、动静分离" class="headerlink" title="2.3、动静分离"></a>2.3、动静分离</h3><p>为了加快网站的解析速度，可以把动态页面和静态页面由不同的服务器来解析，加快解析速度，降低原来单个服务器的压力。<br><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-6.png" alt="image.png"><br>将静态资源部署在Nginx服务器上面请求的是静态资源直接Nginx返回数据。实现动静分离。<br>一般来说，都需要将动态资源和静态资源分开，由于 Nginx 的高并发和静态资源缓存等特性，经常将静态资源部署在 Nginx 上。如果请求的是静态资源，直接到静态资源目录获取资源，如果是动态资源的请求，则利用反向代理的原理，把请求转发给对应后台应用去处理，从而实现动静分离。<br>使用前后端分离后，可以很大程度提升静态资源的访问速度，即使动态服务不可用，静态资源的访问也不会受到影响。</p>
<h2 id="3-Nginx配置"><a href="#3-Nginx配置" class="headerlink" title="3.Nginx配置"></a>3.Nginx配置</h2><p><img src="/2024/07/14/%E4%BB%80%E4%B9%88%E6%98%AFNginx%EF%BC%9F/image-7.png" alt="image.png"><br>上面是对配置的框架分析</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line">1、全局块</span><br><span class="line">该部分配置主要影响Nginx全局，通常包括下面几个部分：</span><br><span class="line"></span><br><span class="line">配置运行Nginx服务器用户（组）</span><br><span class="line"><span class="attribute">worker</span> process数</span><br><span class="line">Nginx进程PID存放路径</span><br><span class="line">错误日志的存放路径</span><br><span class="line">配置文件的引入</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>、events块</span><br><span class="line">该部分配置主要影响Nginx服务器与用户的网络连接，主要包括：</span><br><span class="line"></span><br><span class="line">设置网络连接的序列化</span><br><span class="line">是否允许同时接收多个网络连接</span><br><span class="line">事件驱动模型的选择</span><br><span class="line">最大连接数的配置</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>、http块</span><br><span class="line"></span><br><span class="line">定义MIME-Type</span><br><span class="line">自定义服务日志</span><br><span class="line">允许sendfile方式传输文件</span><br><span class="line">连接超时时间</span><br><span class="line">单连接请求数上限</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>、server块</span><br><span class="line"></span><br><span class="line">配置网络监听</span><br><span class="line">基于名称的虚拟主机配置</span><br><span class="line">基于IP的虚拟主机配置</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>、location块</span><br><span class="line"></span><br><span class="line">location配置</span><br><span class="line">请求根目录配置</span><br><span class="line">更改location的URI</span><br><span class="line">网站默认首页配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>一份配置清单例析</strong></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="comment">#下面这一块是全局块</span></span><br><span class="line"><span class="attribute">user</span>  nobody  nobody;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">3</span>;</span><br><span class="line"><span class="attribute">error_log</span>  logs/<span class="literal">error</span>.log;</span><br><span class="line"><span class="attribute">pid</span>  logs/nginx.pid;</span><br><span class="line"></span><br><span class="line"><span class="comment">#events块</span></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">	<span class="attribute">use</span> <span class="literal">epoll</span>;</span><br><span class="line">  <span class="attribute">worker_connections</span>  <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#http块</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="attribute">log_format</span>  main  <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;<span class="variable">$http_user_agent</span>&quot; &quot;<span class="variable">$http_x_forwarded_for</span>&quot;&#x27;</span>;</span><br><span class="line">    <span class="attribute">access_log</span>  logs/access.log  main;</span><br><span class="line">    <span class="attribute">sendfile</span>  <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#当前nginx服务的一些配置</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="comment"># 当前服务的监听端口</span></span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8088</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  codesheep;</span><br><span class="line">        <span class="attribute">access_log</span>  /codesheep/webserver/server1/log/access.log;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span>  /<span class="number">404</span>.html;</span><br><span class="line">        <span class="comment"># 当前uil下的跳转root 、页面</span></span><br><span class="line">        <span class="section">location</span> /server1/location1 &#123;</span><br><span class="line">            <span class="attribute">root</span>   /codesheep/webserver;</span><br><span class="line">            <span class="attribute">index</span>  index.server2-location1.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># location 配置2</span></span><br><span class="line">        <span class="section">location</span> /server1/location2 &#123;</span><br><span class="line">            <span class="attribute">root</span>   /codesheep/webserver;</span><br><span class="line">            <span class="attribute">index</span>  index.server2-location2.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 第二个Nginx服务器</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">8089</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  <span class="number">192.168.31.177</span>;</span><br><span class="line">        <span class="attribute">access_log</span>  /codesheep/webserver/server2/log/access.log;</span><br><span class="line">        <span class="attribute">error_page</span>  <span class="number">404</span>  /<span class="number">404</span>.html;</span><br><span class="line">		</span><br><span class="line">        <span class="section">location</span> /server2/location1 &#123;</span><br><span class="line">            <span class="attribute">root</span>   /codesheep/webserver;</span><br><span class="line">            <span class="attribute">index</span>  index.server2-location1.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="section">location</span> /srv2/loc2 &#123;</span><br><span class="line">            <span class="attribute">alias</span>   /codesheep/webserver/server2/location2/;</span><br><span class="line">            <span class="attribute">index</span>  index.server2-location2.htm;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment"># 代理请求路径</span></span><br><span class="line">        <span class="section">location</span> /srv3/loc3 &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>	http://127.0.0.1:8080;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">#代理请求路径2</span></span><br><span class="line">        <span class="section">location</span> /srv4/loc4/ &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span>	http://127.0.0.1:8081;</span><br><span class="line">        &#125;</span><br><span class="line">		    </span><br><span class="line">        <span class="section">location</span> = /<span class="number">404</span>.html &#123;</span><br><span class="line">	        <span class="attribute">root</span> /codesheep/webserver/;</span><br><span class="line">	        <span class="attribute">index</span> <span class="number">404</span>.html;</span><br><span class="line">        &#125;</span><br><span class="line">		</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>运维</category>
      </categories>
      <tags>
        <tag>nginx</tag>
        <tag>运维</tag>
      </tags>
  </entry>
</search>
